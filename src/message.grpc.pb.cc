// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace kilovictor {

static const char* KiloVictor_method_names[] = {
  "/kilovictor.KiloVictor/getNumeric",
  "/kilovictor.KiloVictor/setNumeric",
};

std::unique_ptr< KiloVictor::Stub> KiloVictor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< KiloVictor::Stub> stub(new KiloVictor::Stub(channel));
  return stub;
}

KiloVictor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getNumeric_(KiloVictor_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setNumeric_(KiloVictor_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KiloVictor::Stub::getNumeric(::grpc::ClientContext* context, const ::kilovictor::Key& request, ::kilovictor::NumericValue* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getNumeric_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kilovictor::NumericValue>* KiloVictor::Stub::AsyncgetNumericRaw(::grpc::ClientContext* context, const ::kilovictor::Key& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kilovictor::NumericValue>(channel_.get(), cq, rpcmethod_getNumeric_, context, request);
}

::grpc::Status KiloVictor::Stub::setNumeric(::grpc::ClientContext* context, const ::kilovictor::NumericKeyValue& request, ::kilovictor::NumericValue* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_setNumeric_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kilovictor::NumericValue>* KiloVictor::Stub::AsyncsetNumericRaw(::grpc::ClientContext* context, const ::kilovictor::NumericKeyValue& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kilovictor::NumericValue>(channel_.get(), cq, rpcmethod_setNumeric_, context, request);
}

KiloVictor::Service::Service() {
  (void)KiloVictor_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      KiloVictor_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KiloVictor::Service, ::kilovictor::Key, ::kilovictor::NumericValue>(
          std::mem_fn(&KiloVictor::Service::getNumeric), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KiloVictor_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KiloVictor::Service, ::kilovictor::NumericKeyValue, ::kilovictor::NumericValue>(
          std::mem_fn(&KiloVictor::Service::setNumeric), this)));
}

KiloVictor::Service::~Service() {
}

::grpc::Status KiloVictor::Service::getNumeric(::grpc::ServerContext* context, const ::kilovictor::Key* request, ::kilovictor::NumericValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KiloVictor::Service::setNumeric(::grpc::ServerContext* context, const ::kilovictor::NumericKeyValue* request, ::kilovictor::NumericValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kilovictor

