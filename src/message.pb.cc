// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kilovictor {

namespace {

const ::google::protobuf::Descriptor* NumericValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumericValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Key_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumericKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumericKeyValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  NumericValue_descriptor_ = file->message_type(0);
  static const int NumericValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericValue, version_),
  };
  NumericValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NumericValue_descriptor_,
      NumericValue::default_instance_,
      NumericValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(NumericValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericValue, _is_default_instance_));
  Key_descriptor_ = file->message_type(1);
  static const int Key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, value_),
  };
  Key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Key_descriptor_,
      Key::default_instance_,
      Key_offsets_,
      -1,
      -1,
      -1,
      sizeof(Key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _is_default_instance_));
  NumericKeyValue_descriptor_ = file->message_type(2);
  static const int NumericKeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericKeyValue, value_),
  };
  NumericKeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NumericKeyValue_descriptor_,
      NumericKeyValue::default_instance_,
      NumericKeyValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(NumericKeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericKeyValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumericKeyValue, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NumericValue_descriptor_, &NumericValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Key_descriptor_, &Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NumericKeyValue_descriptor_, &NumericKeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete NumericValue::default_instance_;
  delete NumericValue_reflection_;
  delete Key::default_instance_;
  delete Key_reflection_;
  delete NumericKeyValue::default_instance_;
  delete NumericKeyValue_reflection_;
}

void protobuf_AddDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\nkilovictor\".\n\014NumericVa"
    "lue\022\r\n\005value\030\001 \001(\022\022\017\n\007version\030\002 \001(\003\"\024\n\003K"
    "ey\022\r\n\005value\030\001 \001(\014\"X\n\017NumericKeyValue\022\034\n\003"
    "key\030\001 \001(\0132\017.kilovictor.Key\022\'\n\005value\030\002 \001("
    "\0132\030.kilovictor.NumericValue2\212\001\n\nKiloVict"
    "or\0227\n\ngetNumeric\022\017.kilovictor.Key\032\030.kilo"
    "victor.NumericValue\022C\n\nsetNumeric\022\033.kilo"
    "victor.NumericKeyValue\032\030.kilovictor.Nume"
    "ricValueb\006proto3", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  NumericValue::default_instance_ = new NumericValue();
  Key::default_instance_ = new Key();
  NumericKeyValue::default_instance_ = new NumericKeyValue();
  NumericValue::default_instance_->InitAsDefaultInstance();
  Key::default_instance_->InitAsDefaultInstance();
  NumericKeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumericValue::kValueFieldNumber;
const int NumericValue::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumericValue::NumericValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kilovictor.NumericValue)
}

void NumericValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NumericValue::NumericValue(const NumericValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kilovictor.NumericValue)
}

void NumericValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
}

NumericValue::~NumericValue() {
  // @@protoc_insertion_point(destructor:kilovictor.NumericValue)
  SharedDtor();
}

void NumericValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumericValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumericValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumericValue_descriptor_;
}

const NumericValue& NumericValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NumericValue* NumericValue::default_instance_ = NULL;

NumericValue* NumericValue::New(::google::protobuf::Arena* arena) const {
  NumericValue* n = new NumericValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NumericValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kilovictor.NumericValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NumericValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NumericValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, version_);

#undef ZR_HELPER_
#undef ZR_

}

bool NumericValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kilovictor.NumericValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kilovictor.NumericValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kilovictor.NumericValue)
  return false;
#undef DO_
}

void NumericValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kilovictor.NumericValue)
  // optional sint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kilovictor.NumericValue)
}

::google::protobuf::uint8* NumericValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kilovictor.NumericValue)
  // optional sint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kilovictor.NumericValue)
  return target;
}

int NumericValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kilovictor.NumericValue)
  int total_size = 0;

  // optional sint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->value());
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumericValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kilovictor.NumericValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NumericValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NumericValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kilovictor.NumericValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kilovictor.NumericValue)
    MergeFrom(*source);
  }
}

void NumericValue::MergeFrom(const NumericValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kilovictor.NumericValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void NumericValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kilovictor.NumericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumericValue::CopyFrom(const NumericValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kilovictor.NumericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumericValue::IsInitialized() const {

  return true;
}

void NumericValue::Swap(NumericValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumericValue::InternalSwap(NumericValue* other) {
  std::swap(value_, other->value_);
  std::swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NumericValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumericValue_descriptor_;
  metadata.reflection = NumericValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NumericValue

// optional sint64 value = 1;
void NumericValue::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NumericValue::value() const {
  // @@protoc_insertion_point(field_get:kilovictor.NumericValue.value)
  return value_;
}
 void NumericValue::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:kilovictor.NumericValue.value)
}

// optional int64 version = 2;
void NumericValue::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NumericValue::version() const {
  // @@protoc_insertion_point(field_get:kilovictor.NumericValue.version)
  return version_;
}
 void NumericValue::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:kilovictor.NumericValue.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kilovictor.Key)
}

void Key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Key::Key(const Key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kilovictor.Key)
}

void Key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:kilovictor.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_descriptor_;
}

const Key& Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:kilovictor.Key)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kilovictor.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kilovictor.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kilovictor.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kilovictor.Key)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kilovictor.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kilovictor.Key)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kilovictor.Key)
  return target;
}

int Key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kilovictor.Key)
  int total_size = 0;

  // optional bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kilovictor.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kilovictor.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kilovictor.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kilovictor.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kilovictor.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kilovictor.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {

  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Key_descriptor_;
  metadata.reflection = Key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// optional bytes value = 1;
void Key::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Key::value() const {
  // @@protoc_insertion_point(field_get:kilovictor.Key.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kilovictor.Key.value)
}
 void Key::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kilovictor.Key.value)
}
 void Key::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kilovictor.Key.value)
}
 ::std::string* Key::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kilovictor.Key.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Key::release_value() {
  // @@protoc_insertion_point(field_release:kilovictor.Key.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kilovictor.Key.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumericKeyValue::kKeyFieldNumber;
const int NumericKeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumericKeyValue::NumericKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kilovictor.NumericKeyValue)
}

void NumericKeyValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::kilovictor::Key*>(&::kilovictor::Key::default_instance());
  value_ = const_cast< ::kilovictor::NumericValue*>(&::kilovictor::NumericValue::default_instance());
}

NumericKeyValue::NumericKeyValue(const NumericKeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kilovictor.NumericKeyValue)
}

void NumericKeyValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
}

NumericKeyValue::~NumericKeyValue() {
  // @@protoc_insertion_point(destructor:kilovictor.NumericKeyValue)
  SharedDtor();
}

void NumericKeyValue::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void NumericKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumericKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumericKeyValue_descriptor_;
}

const NumericKeyValue& NumericKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

NumericKeyValue* NumericKeyValue::default_instance_ = NULL;

NumericKeyValue* NumericKeyValue::New(::google::protobuf::Arena* arena) const {
  NumericKeyValue* n = new NumericKeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NumericKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kilovictor.NumericKeyValue)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool NumericKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kilovictor.NumericKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kilovictor.Key key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .kilovictor.NumericValue value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kilovictor.NumericKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kilovictor.NumericKeyValue)
  return false;
#undef DO_
}

void NumericKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kilovictor.NumericKeyValue)
  // optional .kilovictor.Key key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional .kilovictor.NumericValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:kilovictor.NumericKeyValue)
}

::google::protobuf::uint8* NumericKeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kilovictor.NumericKeyValue)
  // optional .kilovictor.Key key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // optional .kilovictor.NumericValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kilovictor.NumericKeyValue)
  return target;
}

int NumericKeyValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kilovictor.NumericKeyValue)
  int total_size = 0;

  // optional .kilovictor.Key key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .kilovictor.NumericValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumericKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kilovictor.NumericKeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NumericKeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NumericKeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kilovictor.NumericKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kilovictor.NumericKeyValue)
    MergeFrom(*source);
  }
}

void NumericKeyValue::MergeFrom(const NumericKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kilovictor.NumericKeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_key()) {
    mutable_key()->::kilovictor::Key::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::kilovictor::NumericValue::MergeFrom(from.value());
  }
}

void NumericKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kilovictor.NumericKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumericKeyValue::CopyFrom(const NumericKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kilovictor.NumericKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumericKeyValue::IsInitialized() const {

  return true;
}

void NumericKeyValue::Swap(NumericKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumericKeyValue::InternalSwap(NumericKeyValue* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NumericKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumericKeyValue_descriptor_;
  metadata.reflection = NumericKeyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NumericKeyValue

// optional .kilovictor.Key key = 1;
bool NumericKeyValue::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void NumericKeyValue::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::kilovictor::Key& NumericKeyValue::key() const {
  // @@protoc_insertion_point(field_get:kilovictor.NumericKeyValue.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::kilovictor::Key* NumericKeyValue::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::kilovictor::Key;
  }
  // @@protoc_insertion_point(field_mutable:kilovictor.NumericKeyValue.key)
  return key_;
}
::kilovictor::Key* NumericKeyValue::release_key() {
  // @@protoc_insertion_point(field_release:kilovictor.NumericKeyValue.key)
  
  ::kilovictor::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void NumericKeyValue::set_allocated_key(::kilovictor::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kilovictor.NumericKeyValue.key)
}

// optional .kilovictor.NumericValue value = 2;
bool NumericKeyValue::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void NumericKeyValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::kilovictor::NumericValue& NumericKeyValue::value() const {
  // @@protoc_insertion_point(field_get:kilovictor.NumericKeyValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::kilovictor::NumericValue* NumericKeyValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::kilovictor::NumericValue;
  }
  // @@protoc_insertion_point(field_mutable:kilovictor.NumericKeyValue.value)
  return value_;
}
::kilovictor::NumericValue* NumericKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:kilovictor.NumericKeyValue.value)
  
  ::kilovictor::NumericValue* temp = value_;
  value_ = NULL;
  return temp;
}
void NumericKeyValue::set_allocated_value(::kilovictor::NumericValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kilovictor.NumericKeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kilovictor

// @@protoc_insertion_point(global_scope)
